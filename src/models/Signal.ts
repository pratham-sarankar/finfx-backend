/**
 * Signal Model
 * Represents trading signals generated by bots with entry/exit details
 * Core model for tracking trading performance and signal execution
 */
import mongoose, { Document } from "mongoose";

/**
 * Interface for Signal document
 * @interface ISignal
 * @extends {Document}
 */
export interface ISignal extends Document {
  /** Reference to the user who received/executed the signal */
  userId?: mongoose.Types.ObjectId;
  /** Trading lot size for position sizing */
  lotSize?: number;
  /** Stop loss price level */
  stopLossPrice?: number;
  /** Target price level */
  targetPrice?: number;
  /** Reference to the bot that generated this signal */
  botId?: mongoose.Types.ObjectId;
  /** Unique trade identifier */
  tradeId?: string;
  /** Trading direction - LONG (buy) or SHORT (sell) */
  direction: "LONG" | "SHORT";
  /** Time when signal was generated */
  signalTime?: Date;
  /** Time when position was entered */
  entryTime: Date;
  /** Price at which position was entered */
  entryPrice: number;
  /** Stop loss level as price or percentage */
  stoploss?: number;
  /** First target level (1R - 1x risk) */
  target1r?: number;
  /** Second target level (2R - 2x risk) */
  target2r?: number;
  /** Time when position was exited */
  exitTime?: Date;
  /** Price at which position was exited */
  exitPrice?: number;
  /** Reason for position exit (stop loss, target, manual, etc.) */
  exitReason?: string;
  /** Profit or loss amount in currency */
  profitLoss?: number;
  /** Profit or loss in R-multiple (risk units) */
  profitLossR?: number;
  /** Number of trailing stop adjustments */
  trailCount?: number;
  /** Trading pair name (e.g., BTCUSD, ETHUSD) */
  pairName?: string;
  /** Document creation timestamp */
  createdAt: Date;
  /** Document last update timestamp */
  updatedAt: Date;
}

/**
 * Signal Schema Definition
 * Defines validation rules and structure for trading signal documents
 */
const signalSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: [true, "User ID is required"],
    },
    lotSize: {
      type: Number,
      required: [true, "Lot size is required"],
      min: [0.01, "Lot size must be at least 0.01"],
    },
    stopLossPrice: {
      type: Number,
      min: [0, "Stop loss price cannot be negative"],
    },
    targetPrice: {
      type: Number,
      min: [0, "Target price cannot be negative"],
    },
    botId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Bot",
    },
    tradeId: {
      type: String,
      // Unique constraint handled by compound index below
    },
    direction: {
      type: String,
      required: [true, "Direction is required"],
      enum: {
        values: ["LONG", "SHORT"],
        message: "Direction must be either LONG or SHORT",
      },
    },
    signalTime: {
      type: Date,
    },
    entryTime: {
      type: Date,
      required: [true, "Entry time is required"],
    },
    entryPrice: {
      type: Number,
      required: [true, "Entry price is required"],
      min: [0, "Entry price cannot be negative"],
    },
    stoploss: {
      type: Number,
      min: [0, "Stop loss cannot be negative"],
    },
    target1r: {
      type: Number,
      min: [0, "Target 1R cannot be negative"],
    },
    target2r: {
      type: Number,
      min: [0, "Target 2R cannot be negative"],
    },
    exitTime: {
      type: Date,
    },
    exitPrice: {
      type: Number,
      min: [0, "Exit price cannot be negative"],
    },
    exitReason: {
      type: String,
      trim: true,
      maxlength: [100, "Exit reason cannot exceed 100 characters"],
    },
    profitLoss: {
      type: Number,
      // Can be negative for losses
    },
    profitLossR: {
      type: Number,
      // R-multiple can be negative for losses
    },
    trailCount: {
      type: Number,
      min: [0, "Trail count cannot be negative"],
      default: 0,
    },
    pairName: {
      type: String,
      required: [true, "Pair name is required"],
      trim: true,
      minlength: [3, "Pair name must be at least 3 characters long"],
      maxlength: [50, "Pair name must be less than or equal to 50 characters"],
    }
  },
  {
    timestamps: true, // Automatically adds createdAt and updatedAt fields
    versionKey: false, // Removes __v field
    toJSON: {
      // Transform output to use 'id' instead of '_id'
      transform(_doc, ret: any) {
        ret.id = ret._id;
        delete ret._id;
      },
    },
  }
);

// Compound index to ensure unique tradeId per bot
signalSchema.index({ botId: 1, tradeId: 1 }, { unique: true });

// Performance indexes for common queries
signalSchema.index({ botId: 1, signalTime: -1 }); // Bot signals by time
signalSchema.index({ botId: 1, direction: 1 }); // Bot signals by direction
signalSchema.index({ signalTime: -1 }); // All signals by time
signalSchema.index({ direction: 1 }); // All signals by direction
signalSchema.index({ userId: 1, signalTime: -1 }); // User signals by time

// Create and export the Signal model
export default mongoose.model<ISignal>("Signal", signalSchema);
